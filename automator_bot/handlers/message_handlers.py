from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from telegram.constants import ChatAction
from telegram.ext import ContextTypes

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.ai_service import AIService
from services.automation_service import AutomationService
from services.feedback_service import FeedbackService
from services.memory_service import MemoryService
from services.image_service import ImageService
from services.analysis_service import AnalysisService
from services.achievement_service import AchievementService
from services.excel_service import ExcelService
import re
from datetime import datetime
from handlers.command_handlers import help_command, settings, about, feedback, start

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if user_message == "ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫":
        keyboard = [
            [KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–†–µ–∂–∏–º AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
            "–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n"
            "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=reply_markup
        )
        context.user_data['mode'] = 'ai_assistant'
        return
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif user_message == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await start(update, context)
        context.user_data['mode'] = None
        return
        
    elif user_message == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        await about(update, context)
        return
        
    elif user_message == "üìù –û—Ç–∑—ã–≤":
        await feedback(update, context)
        return
        
    elif user_message == "üìù –û–±—ã—á–Ω—ã–π –æ—Ç–∑—ã–≤":
        context.user_data['feedback_type'] = 'regular'
        context.user_data['mode'] = 'waiting_feedback'
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ:",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )
        return
        
    elif user_message == "üé≠ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤":
        context.user_data['feedback_type'] = 'anonymous'
        context.user_data['mode'] = 'waiting_anonymous_name'
        await update.message.reply_text(
            "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è?",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")]], resize_keyboard=True)
        )
        return
        
    elif user_message == "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞":
        await start(update, context)
        context.user_data['mode'] = None
        return
    
    elif user_message == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã":
        feedbacks = FeedbackService.get_recent_feedbacks()
        await update.message.reply_text(
            feedbacks,
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True)
        )
        return
    
    elif user_message == "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π":
        keyboard = [
            [KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üé® –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
            "–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫' –∏–ª–∏ '–∫–æ—Ç–µ–Ω–æ–∫ –∏–≥—Ä–∞–µ—Ç —Å –∫–ª—É–±–∫–æ–º –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ'",
            reply_markup=reply_markup
        )
        context.user_data['mode'] = 'image_generation'
        return
    
    elif user_message == "üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞":
        keyboard = [
            [KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üìä –†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å.\n"
            "–Ø –æ–ø—Ä–µ–¥–µ–ª—é –µ–≥–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Ç–µ–º—ã.",
            reply_markup=reply_markup
        )
        context.user_data['mode'] = 'text_analysis'
        return
        
    elif user_message == "üìà Excel –ø–æ–º–æ—â–Ω–∏–∫":
        keyboard = [
            [KeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å Excel"), KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å Excel")],
            [KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üìà Excel –ø–æ–º–æ—â–Ω–∏–∫\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å Excel —Ñ–∞–π–ª–∞–º–∏:\n"
            "- –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "- –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏–∑ –¥–∞–Ω–Ω—ã—Ö\n"
            "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏",
            reply_markup=reply_markup
        )
        context.user_data['mode'] = 'excel_helper'
        return
    
    elif user_message == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        user_data = AchievementService.get_user_level(update.effective_user.id)
        
        profile_text = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"üèÖ –£—Ä–æ–≤–µ–Ω—å: {user_data['level']}\n"
            f"‚ú® –¢–∏—Ç—É–ª: {user_data['title']}\n"
            f"üìà –û–ø—ã—Ç: {user_data['exp']}\n"
            f"üéØ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {user_data['next_level'] - user_data['exp']}\n\n"
            f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
        )
        
        for achievement in user_data['achievements'][-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            profile_text += f"‚Ä¢ {achievement['title']} - {achievement['date']}\n"
            
        await update.message.reply_text(profile_text)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–æ–≤ –æ—Ç–∑—ã–≤–∞
    if context.user_data.get('mode') == 'waiting_anonymous_name':
        context.user_data['anonymous_name'] = user_message
        context.user_data['mode'] = 'waiting_feedback'
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ:")
        return
        
    elif context.user_data.get('mode') == 'waiting_feedback':
        feedback_type = context.user_data.get('feedback_type')
        if feedback_type == 'regular':
            author = update.message.from_user.username or update.message.from_user.first_name
        else:
            author = context.user_data.get('anonymous_name', '–ê–Ω–æ–Ω–∏–º')
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤
        FeedbackService.save_feedback(
            author=author,
            text=user_message,
            is_anonymous=(feedback_type == 'anonymous')
        )
        
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üôè\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –æ—Ç–∑—ã–≤—ã, –Ω–∞–∂–∞–≤ 'üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã'",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True)
        )
        context.user_data['mode'] = None
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ AI
    if context.user_data.get('mode') == 'ai_assistant':
        try:
            await update.message.chat.send_action(ChatAction.TYPING)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            MemoryService.save_message(
                user_id=update.effective_user.id,
                username=update.effective_user.username or update.effective_user.first_name,
                message=user_message
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
            ai_response = AIService.generate_response(
                prompt=user_message,
                user_id=update.effective_user.id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            MemoryService.save_message(
                user_id=update.effective_user.id,
                username=update.effective_user.username or update.effective_user.first_name,
                message=ai_response,
                is_bot=True
            )
            
            await update.message.reply_text(ai_response)
            
            AchievementService.add_experience(update.effective_user.id, "message")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
            )
    elif context.user_data.get('mode') == 'image_generation':
        try:
            await update.message.chat.send_action(ChatAction.UPLOAD_PHOTO)
            await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_url = await ImageService.generate_image(
                prompt=user_message,
                user_id=update.effective_user.id
            )
            
            if image_url.startswith('http'):
                await update.message.reply_photo(image_url)
            else:
                await update.message.reply_text(image_url)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."
            )
    elif context.user_data.get('mode') == 'text_analysis':
        await update.message.chat.send_action(ChatAction.TYPING)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await update.message.reply_text("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")
        try:
            analysis = await AnalysisService.analyze_text(user_message)
            if analysis:
                await update.message.chat.send_action(ChatAction.TYPING)
                response = (
                    f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n\n"
                    f"üòä –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {analysis['sentiment']}\n"
                    f"üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(analysis['keywords'])}\n"
                    f"üìù –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: {analysis['themes']}\n"
                    f"üìè –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"- –°–ª–æ–≤: {analysis['word_count']}\n"
                    f"- –°–∏–º–≤–æ–ª–æ–≤: {analysis['char_count']}"
                )
                await update.message.reply_text(response)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
                AchievementService.add_experience(update.effective_user.id, "analysis")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç."
            )
    elif context.user_data.get('mode') == 'excel_helper':
        if user_message == "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º Excel —Ñ–∞–π–ª–µ
            if 'current_excel' in context.user_data:
                del context.user_data['current_excel']
            context.user_data['mode'] = None
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            keyboard = [
                [KeyboardButton("ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫"), KeyboardButton("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")],
                [KeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"), KeyboardButton("üìà Excel –ø–æ–º–æ—â–Ω–∏–∫")],
                [KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ"), KeyboardButton("üìù –û—Ç–∑—ã–≤")],
                [KeyboardButton("üéÆ –ò–≥—Ä–æ–≤–æ–π —Ü–µ–Ω—Ç—Ä", web_app=WebAppInfo(url="http://localhost:5000"))]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
            return
            
        elif update.message.document:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª
            file = await context.bot.get_file(update.message.document.file_id)
            file_path = f"excel_files/temp_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            os.makedirs("excel_files", exist_ok=True)
            await file.download_to_drive(file_path)
            
            # –ß–∏—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            info = await ExcelService.read_excel(file_path)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
            keyboard = [
                [KeyboardButton("üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton("üîç –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å")],
                [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü"), KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü")],
                [KeyboardButton("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), KeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"{info}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ñ–∞–π–ª–æ–º:",
                reply_markup=reply_markup
            )
            context.user_data['current_excel'] = file_path
            
        elif user_message == "üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ò–º—è"
            )
            
        elif user_message == "üîç –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≥–¥–µ –í–æ–∑—Ä–∞—Å—Ç > 25"
            )
            
        elif user_message == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü –ó–∞—Ä–ø–ª–∞—Ç–∞"
            )
            
        elif user_message == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü":
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: —É–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü –í–æ–∑—Ä–∞—Å—Ç"
            )
            
        elif user_message == "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
            if 'current_excel' in context.user_data:
                info = await ExcelService.read_excel(context.user_data['current_excel'])
                await update.message.reply_text(info)
            else:
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª!")
            
        elif user_message.startswith(("—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", "—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å", "–¥–æ–±–∞–≤–∏—Ç—å", "—É–¥–∞–ª–∏—Ç—å")):
            if 'current_excel' in context.user_data:
                edited_file = await ExcelService.edit_excel(
                    context.user_data['current_excel'],
                    user_message
                )
                await update.message.reply_document(
                    document=open(edited_file, 'rb'),
                    caption="–í–æ—Ç –≤–∞—à –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª!"
                )
            else:
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª!")
    else:
        await update.message.reply_text(
            "–î–ª—è –æ–±—â–µ–Ω–∏—è —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'ü§ñ AI –ü–æ–º–æ—â–Ω–∏–∫'"
        )

async def handle_state(update: Update, context: ContextTypes.DEFAULT_TYPE, state: str, user_message: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞"""
    if state == 'waiting_text_prompt':
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∏–ø —Ç–µ–∫—Å—Ç–∞ (–†–µ—Ñ–µ—Ä–∞—Ç, –°—Ç–∞—Ç—å—è –∏ —Ç.–¥.)
        prompt = f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π {user_message.lower()} –Ω–∞ —Ç–µ–º—É: {context.user_data.get('topic', '–æ–±—â–∞—è —Ç–µ–º–∞')}. "
        prompt += "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º."
        
        await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        response = await AIService.generate_response(prompt)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —á–∞—Å—Ç—è–º, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π
        if len(response) > 4000:
            parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
            for part in parts:
                await update.message.reply_text(part)
        else:
            await update.message.reply_text(response)
            
        context.user_data['state'] = None

    elif state == 'waiting_image_prompt':
        image_url = await AutomationService.generate_image(user_message)
        await update.message.reply_text(f"–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
        context.user_data['state'] = None

    elif state == 'waiting_analysis_text':
        analysis = await AutomationService.analyze_text(user_message)
        response = (
            f"–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:\n"
            f"–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {analysis['sentiment']}\n"
            f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(analysis['keywords'])}\n"
            f"–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {analysis['summary']}"
        )
        await update.message.reply_text(response)
        context.user_data['state'] = None

    elif state == 'waiting_translation':
        if user_message == "–ù–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π":
            context.user_data['target_lang'] = 'en'
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:")
        elif user_message == "–ù–∞ —Ä—É—Å—Å–∫–∏–π":
            context.user_data['target_lang'] = 'ru'
            await update.message.reply_text("Enter text to translate to Russian:")
        elif user_message == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
            context.user_data['state'] = None
            await start(update, context)
        else:
            target_lang = context.user_data.get('target_lang', 'en')
            translation = await AutomationService.translate_text(user_message, target_lang)
            await update.message.reply_text(translation)
            context.user_data['state'] = None

    elif state == 'waiting_reminder':
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        match = re.search(r'(.*?)(?:–∑–∞–≤—Ç—Ä–∞ –≤|—Å–µ–≥–æ–¥–Ω—è –≤|–≤)?\s*(\d{1,2}:\d{2})', user_message)
        if match:
            text = match.group(1).strip()
            time_str = match.group(2)
            time = datetime.strptime(time_str, "%H:%M")
            if await AutomationService.set_reminder(update.effective_user.id, text, time):
                await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time_str}")
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        else:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∑–∞–≤—Ç—Ä–∞ –≤ 18:00"
            )
        context.user_data['state'] = None 