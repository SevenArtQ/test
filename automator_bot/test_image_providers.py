import g4f
import base64
import os
from datetime import datetime

def test_all_providers():
    # –ü—É—Ç—å –∫ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    image_path = r"D:\–ó–∞–≥—Ä—É–∑–∫–∏\98ddac63a383fe536cee05094b79a58f.jpg"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(image_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
        return
        
    print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {image_path}")
    
    # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    with open(image_path, 'rb') as image_file:
        image_data = base64.b64encode(image_file.read()).decode('utf-8')

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
    all_providers = []
    for provider in dir(g4f.Provider):
        if not provider.startswith('_'):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            provider_obj = getattr(g4f.Provider, provider)
            if hasattr(provider_obj, 'create_completion'):
                all_providers.append((provider_obj, "gpt-3.5-turbo"))

    print(f"\n–ù–∞–π–¥–µ–Ω–æ {len(all_providers)} –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    print("-" * 50)

    working_providers = []

    for provider, model in all_providers:
        try:
            print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º {provider.__name__}")
            
            response = g4f.ChatCompletion.create(
                model=model,
                messages=[{
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ? –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                        },
                        {
                            "type": "image_url",
                            "image_url": f"data:image/jpeg;base64,{image_data}"
                        }
                    ]
                }],
                provider=provider
            )
            
            if response and len(str(response).strip()) > 0:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –û—Ç–≤–µ—Ç: {str(response)[:100]}...")
                working_providers.append((provider.__name__, model))
            else:
                print("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(all_providers)}")
    print(f"–†–∞–±–æ—Ç–∞–µ—Ç: {len(working_providers)}")
    print("\n–†–∞–±–æ—á–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:")
    for name, model in working_providers:
        print(f"- {name} ({model})")

if __name__ == "__main__":
    test_all_providers() 